# -*- coding: utf-8 -*-
"""ES19BTECH11017_CS19BTECH11051_Assgn1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wr1ij3D0hv2_QaDaNYIC1-LOZYYCObnO
"""

import numpy as np
import pandas as pd
from scipy.stats import chisquare

# comment it out and upload the dataset locally if required
dataset_path = r"/content/drive/MyDrive/Acad_Stuff/Course Work/Semester 5/Fraud/Ass1/benford.csv"

dataset_path = r"benford.csv"

# reading the dataset
df = pd.read_csv(dataset_path, encoding='latin-1')
print(df.dtypes)

"""### Function to extract the first and second digits of the "Population" column"""

def first_digit_count(column):
  df['first_digit'] = df[column].astype(str).str[:1].astype(int)
  df['first_two_digits'] = df[column].astype(str).str[:2].astype(int)

  # count the frequency of each first digit
  first_digit_freq = df['first_digit'].value_counts()
  first_digit_freq = first_digit_freq.to_numpy()
  first_digit_percent = (first_digit_freq / first_digit_freq.sum())

  # count the frequency of each first two digits
  first_two_digit_freq = df['first_two_digits'].value_counts()
  first_two_digit_freq = first_two_digit_freq.to_numpy()
  first_two_digit_percent = (first_two_digit_freq / first_two_digit_freq.sum())
  return first_digit_freq, first_digit_percent, first_two_digit_freq, first_two_digit_percent

"""### MAD"""

def MAD(observed, expected, K):
  diff = observed - expected
  diff = np.absolute(diff)

  MAD_val = diff.sum() / K
  return MAD_val

"""# First Digit Benford's Law"""

first_digit_data = first_digit_count("Population")

"""### Computing the expected count of each digit for a dataset of this size"""

num = np.arange(1, 10)
ones = np.ones(9)
log_calc = 1 + (ones / num)
# expected frequencies of each digit
expected_freq = np.log10(log_calc)
# expected count of each digit for the given dataset
expected_count = (expected_freq * first_digit_data[0].sum())
expected_count = np.round_(expected_count)

print(expected_freq)
print(expected_count)

"""### p-value"""

# printing the p value
chisquare_val = chisquare(first_digit_data[0], f_exp=expected_count)
print("p-value:", chisquare_val[1])

"""### MAD"""

print("MAD:", MAD(first_digit_data[1], expected_freq, 9))

"""# Second Digit Benford's Law

### Computing the expected count of each digit for a dataset of this size
"""

num = np.arange(10, 100)
ones = np.ones(90)
log_calc = 1 + (ones / num)
# expected frequencies of each digit
expected_freq = np.log10(log_calc)
# expected count of each digit for the given dataset
expected_count = (expected_freq * first_digit_data[0].sum())
expected_count = np.round_(expected_count)

"""### p-value"""

# printing the p value
chisquare_val = chisquare(first_digit_data[2], f_exp=expected_count)
print("p-value:", chisquare_val[1])

"""### MAD"""

print("MAD:", MAD(first_digit_data[3], expected_freq, 90))