# -*- coding: utf-8 -*-
"""ES19BTECH11017_CS19BTECH11051_Assgn4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GXiQSoByjKQTIq_3xDcRz_2S6eBsyXIC
"""

import numpy as np
import pandas as pd
from sklearn.cluster import KMeans

import sys
np.set_printoptions(threshold=sys.maxsize)

"""### Read dataset"""

dataset_path = r"/content/drive/MyDrive/Acad_Stuff/Course Work/Semester 5/Fraud/Ass4/MAIL_TO_REG_STUD_174962_1564773_20211104_171004_570.csv"
df = pd.read_csv(dataset_path)
print(df.dtypes)
print(df.shape)

data = df.to_numpy()

"""### Adjacency Matrix"""

A = np.zeros((data.shape[0], data.shape[0]))

r = np.ptp(data, axis=0)
w = 1
a = 1

# print(data.shape, data[0, :].shape, r.shape)
for k in range(data.shape[0]):
  diff = np.absolute(data - data[k, :])
  d_arr = (diff / r) * a
  d = np.sum(d_arr, axis = 1)
  A[k, :] = d

print(A.shape)

"""### Clustering

As done in this [link](https://towardsdatascience.com/spectral-clustering-aba2640c0d5b).
"""

# diagonal matrix
D = np.diag(A.sum(axis = 1))

# graph laplacian
L = D - A

# eigenvalues and eigenvectors
vals, vecs = np.linalg.eig(L)

# sort these based on the eigenvalues
vecs = vecs[:,np.argsort(vals)]
vals = vals[np.argsort(vals)]


kmeans = KMeans(n_clusters=4)
# kmeans.fit(vecs[:,1:1199])
kmeans.fit(vecs[:, :])
clusters = kmeans.labels_

print("Clusters:\n", clusters)

"""The data required to identify outliers wasn't provided, hence that part has not been done in this submission."""